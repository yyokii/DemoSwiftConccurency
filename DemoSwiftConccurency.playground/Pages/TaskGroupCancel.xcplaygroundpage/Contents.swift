
import Foundation
import SwiftUI

// https://www.hackingwithswift.com/quick-start/concurrency/how-to-cancel-a-task-group

func printMessage() async {
    let result = await withThrowingTaskGroup(of: String.self) { group -> String in

        //        // „Ç≠„É£„É≥„Çª„É´„ÅåËµ∑„Åì„Å£„Å¶„ÇÇ„Åù„Çå„Çí„Éè„É≥„Éâ„É™„É≥„Ç∞„Åó„Å™„ÅÑ„Çø„Çπ„ÇØ ‚Üí „Ç≠„É£„É≥„Çª„É´„Åó„Å¶„ÇÇÂá∫Âäõ„ÅåÂæó„Çâ„Çå„Çã
        //        group.addTask {
        //            return "Testing"
        //        }

        // „Ç≠„É£„Çª„É´„Åï„Çå„Çã„Å®throw„ÇíÊäï„Åí„Çã ‚Üí „Ç≠„É£„É≥„Çª„É´„Åï„Çå„Çã„Å®„Åì„ÅÆ„Çø„Çπ„ÇØ„ÅÆÂá∫Âäõ„ÅØÂá∫„Å™„ÅÑ
        // ÂÆüË°åÈ†ÜÊ¨°Á¨¨„Åß„ÅØ‰ªñ„ÅÆÁµÇ„Çè„Å£„Å¶„ÅÑ„Çã„Çø„Çπ„ÇØ„ÅÆÂá∫Âäõ„ÅØÂèó„ÅëÂèñ„Çå„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çã
        group.addTask {
            try Task.checkCancellation()
            return "Testing"
        }

        group.addTask {
            return "Group"
        }

        group.addTask {
            return "Cancellation"
        }

        group.cancelAll()
        var collected = [String]()

        do {
            for try await value in group {
                collected.append(value)
            }
        } catch {
            print("üìù catch error: " + error.localizedDescription)
        }

        return collected.joined(separator: " ")
    }

    print(result)
}

Task {
    await printMessage()
}

// MARK: „Éã„É•„Éº„Çπ„Éï„Ç£„Éº„Éâ„ÇíÂèñÂæó„Åô„Çã‰æã

struct NewsStory: Identifiable, Decodable {
    let id: Int
    let title: String
    let strap: String
    let url: URL
}

struct ContentView {
        @State private var stories = [NewsStory]()

    //    var body: some View {
    //        NavigationView {
    //            List(stories) { story in
    //                VStack(alignment: .leading) {
    //                    Text(story.title)
    //                        .font(.headline)
    //
    //                    Text(story.strap)
    //                }
    //            }
    //            .navigationTitle("Latest News")
    //        }
    //        .task {
    //            await loadStories()
    //        }
    //    }

    private var stories = [NewsStory]()

    mutating func loadStories() async {
        do {
            try await withThrowingTaskGroup(of: [NewsStory].self) { group -> Void in
                for i in 1...5 {
                    group.addTask {
                        let url = URL(string: "https://hws.dev/news-\(i).json")!
                        let (data, _) = try await URLSession.shared.data(from: url)
                        try Task.checkCancellation()
                        let res = try JSONDecoder().decode([NewsStory].self, from: data)
                        print("üìù res \(i): \(res.count)")
                        return res
                    }
                }

                for try await result in group {
                    if result.isEmpty {
                        group.cancelAll()
                        print("üìù cancelAll is called")
                    } else {
                        stories.append(contentsOf: result)
                        print("üìù stories: \(stories.count)")
                    }
                }

                stories.sort { $0.id < $1.id }
            }
        } catch {
            print("Failed to load stories: \(error.localizedDescription)")
        }
    }
}

Task {
    var contentView = ContentView()
    await contentView.loadStories()
}

enum ExampleError: Error {
    case badURL
}

func testCancellation() async {
    do {
        try await withThrowingTaskGroup(of: Void.self) { group -> Void in
            group.addTask {
                try await Task.sleep(nanoseconds: 1_000_000_000)
                throw ExampleError.badURL
            }

            group.addTask {
                try await Task.sleep(nanoseconds: 2_000_000_000)
                print("Task is cancelled: \(Task.isCancelled)")
            }

            try await group.next()
        }
    } catch {
        print("Error thrown: \(error.localizedDescription)")
    }
}

Task {
    await testCancellation()
}
